{"version":3,"sources":["ConnectInput.js","EmbedChat.js","EmbedPlayer.js","randomInteger.js","path.js","useApi.js","SingleMessage.js","DefaultRandomMessages.js","store/Messages.js","RandomMessages.js","useToggle.js","CustomMessage.js","UsersInput.js","EditComponent.js","App.js","index.js"],"names":["ConnectInput","props","scodeInputRef","useRef","ref","placeholder","onChange","e","current","value","target","onClick","path","scode","refValue","pStr","localStorage","setItem","JSON","stringify","console","log","getItem","parse","handleCheck","axios","get","then","res","data","post","selectChannel","setLink","catch","error","EmbedChat","window","location","href","split","slice","length","src","channel","className","width","EmbedPlayer","randomInteger","min","max","rand","Math","random","round","useApi","startConnect","idx","u","TApi","connectUser","setTimeout","sendMessage","user","message","userName","iSend","cUser","name","oauth","body","turboAuth","users","SingleMessage","map","style","border","arr","TAPI","handleClick","getArr","str","Message","constructor","id","title","img","this","DefaultRandomMessages","state","addMessage","clearMessage","Date","now","newState","push","removeMessage","filter","i","makeAutoObservable","init","localM","reset","updateMessage","MessageByTitle","messages","find","el","RandomMessages","authUsers","setAuthUsers","isHelloShow","toggleHelloShow","useState","isBBShow","toggleBBShow","toggleIsEdit","isEdit","Messages","index","item","messagesArr","backgroundImage","type","useToggle","chatUsers","setState","toggle","useCallback","currentUsers","setCurrentUsers","randomUsers","sort","a","b","useEffect","setInterval","m","turboSendMessage","clearInterval","CustomMessage","TextAreaRef","InputRef","isSpam","toggleIsSpam","stateUser","setStateUser","filtredUsers","setFiltedusers","counter","setCounter","handleSendEnter","Style","display","onKeyUp","key","newUsers","match","UserInput","TextareaRef","setUsers","uNames","alert","checkUsers","EditElement","setCurrentMessage","mTitleRef","mImgRef","mArr","setMArr","handleTogglePlayer","isPlayerShow","defaultValue","toString","replaceAll","val","observer","toggleIsPlayerShow","false","App","localCode","sCode","setSCode","dUsers","dPath","UsersInput","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.b3910efe.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport { useRef } from \"react\";\r\n\r\nconst ConnectInput = (props) => {\r\n  const scodeInputRef = useRef(\"\");\r\n\r\n  const handleConnect = () => {\r\n    const handleCheck = (refValue, pStr) => {\r\n      let value = \"\";\r\n\r\n      if (refValue) {\r\n        localStorage.setItem(pStr, JSON.stringify(refValue));\r\n        console.log(\"saved\");\r\n        value = refValue;\r\n      } else if (localStorage.getItem(pStr)) {\r\n        value = JSON.parse(localStorage.getItem(pStr));\r\n      }\r\n      console.log(localStorage.getItem(\"scode\"));\r\n      return value;\r\n    };\r\n\r\n    // const path = `https://mysterious-temple-49529.herokuapp.com/connect`;\r\n    let path = ``;\r\n    const scode = handleCheck(scodeInputRef.current.value, \"scode\");\r\n\r\n    axios\r\n      .get(`http://localhost:5000/getlink`)\r\n      .then((res) => {\r\n        path = res.data;\r\n        console.log(path);\r\n      })\r\n      .then(() => {\r\n        if (scode != \"\") {\r\n          axios\r\n            .post(path, { scode: scode })\r\n            .then((res) => {\r\n              if (res.data == \"error\") {\r\n                // console.log(1);\r\n              } else {\r\n                console.log(2);\r\n                props.selectChannel(res.data);\r\n                props.setLink(`http://localhost:5000`);\r\n              }\r\n            })\r\n            .catch((error) => {\r\n              console.log(error);\r\n              return error;\r\n            });\r\n        }\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        ref={scodeInputRef}\r\n        placeholder={\"code\"}\r\n        onChange={(e) => {\r\n          scodeInputRef.current.value = e.target.value;\r\n          // console.log(scodeInputRef.current.value);\r\n        }}\r\n      />\r\n\r\n      <button onClick={handleConnect}>select channel</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ConnectInput;\r\n","// import {useParams} from 'react-router-dom'\r\n\r\nconst EmbedChat = (props) => {\r\n  const parent = window.location.href\r\n    .split(\"//\")[1]\r\n    .slice(0, window.location.href.split(\"//\")[1].length - 1);\r\n    \r\n  // const src = `https://www.twitch.tv/embed/${props.channel}/chat?parent=${parent}&darkpopout`;\r\n  const src = `https://www.twitch.tv/embed/${props.channel}/chat?parent=exmiperson.github.io/zxc/&darkpopout`;\r\n  console.log(src);\r\n  return <iframe className=\"embed_chat\" src={src} width=\"350px\"></iframe>;\r\n};\r\n\r\nexport default EmbedChat;\r\n","const EmbedPlayer = (props) => {\r\n  const parent = window.location.href\r\n    .split(\"//\")[1]\r\n    .slice(0, window.location.href.split(\"//\")[1].length - 1);\r\n\r\n  // const src = `https://player.twitch.tv/?${props.channel}&parent=${parent}`;\r\n  // const src = `https://player.twitch.tv/?channel=${props.channel}&parent=${parent}`;\r\n  const src = `https://player.twitch.tv/?channel=${props.channel}&parent=exmiperson.github.io/zxc/`;\r\n  \r\n  \r\n  \r\n  // console.log(src);\r\n\r\n\r\n  return <iframe className=\"embed_player\" src={src}></iframe>;\r\n};\r\n\r\nexport default EmbedPlayer;\r\n","const randomInteger = (min, max) => {\r\n  let rand = min - 0.5 + Math.random() * (max - min + 1);\r\n  return Math.round(rand);\r\n};\r\n\r\nexport default randomInteger;\r\n","const path = \"http://localhost:5000\";\r\n// const path = \"https://radiant-inlet-52637.herokuapp.com\";\r\nexport default path;\r\n","import axios from \"axios\";\r\nimport path from \"./path\";\r\n\r\nfunction useApi(channel) {\r\n  const iSend = (userName, message) => {\r\n    axios\r\n      .post(path + `/${userName}/message`, {\r\n        message: message\r\n      })\r\n      .catch((error) => {\r\n        return error;\r\n      });\r\n  };\r\n\r\n  const startConnect = (idx, u) => {\r\n    console.log(u[idx]);\r\n    if (idx < u.length) {\r\n      TApi.connectUser(u[idx]);\r\n      idx++;\r\n      setTimeout(() => {\r\n        startConnect(idx, u);\r\n      }, 300);\r\n    }\r\n  };\r\n\r\n  const TApi = {\r\n    sendMessage: (user, message) => {\r\n      let userName = user.split(\":\")[0];\r\n      iSend(userName, message);\r\n    },\r\n\r\n    connectUser: (user) => {\r\n      let cUser = {\r\n        name: user.split(\":\")[0],\r\n        oauth: user.split(\":\")[2]\r\n      };\r\n\r\n      let body = {\r\n        user: { name: cUser.name, oauth: cUser.oauth },\r\n        channel: channel\r\n      };\r\n\r\n      axios\r\n        .post(path + \"/connect\", body)\r\n        .then((res) => console.log(res.data))\r\n        .catch((error) => {\r\n          return error;\r\n        });\r\n    },\r\n\r\n    turboAuth: () => {\r\n      let users = JSON.parse(localStorage.getItem(\"users\"));\r\n      let idx = 0;\r\n      startConnect(idx, users);\r\n    }\r\n  };\r\n\r\n  return TApi;\r\n}\r\n\r\nexport default useApi;\r\n","import axios from \"axios\";\r\nimport randomInteger from \"./randomInteger\";\r\nimport useApi from \"./useApi\";\r\n\r\nconst SingleMessage = (props) => {\r\n  // const [uToArr, ]\r\n  // let usersArr = () =>\r\n  //   props.users.map(\r\n  //     (u, index) =>\r\n  //       (u = {\r\n  //         name: props.users[index].split(\":\")[0],\r\n  //         oauth: props.users[index].split(\":\")[2]\r\n  //       })\r\n  //   );\r\n\r\n  //   let getArr = (str) =>\r\n  //     str.slice(1, str.length - 1).split(`\r\n  // `);\r\n\r\n  // class Message {\r\n  //   constructor(arr, title, img) {\r\n  //     (this.arr = arr), (this.title = title), (this.img = img || \"\");\r\n  //   }\r\n  // }\r\n\r\n  // let messagesArr = [\r\n  //   new Message(getArr(qq), \"qq\", \"https://bit.ly/3nJgnlA\"),\r\n  //   new Message(getArr(bb), \"bb\", \"https://bit.ly/3BB7IpX\")\r\n  // ];\r\n\r\n  const handleClick = (e, user) => {\r\n    e.target.style.border = \"2px red solid\";\r\n    // let user = props.users.find((u) => u.name == e.target.innerText);\r\n    // user = user.name + \":oauth:\" + user.oauth;\r\n    // let useNeed = usersArr.find((u) => u.name == e.target.innerText);\r\n    // console.log(usersArr);\r\n    // let url = `/${e.target.innerText}/message/`;\r\n    let message =\r\n      props.message.arr[randomInteger(0, props.message.arr.length - 1)];\r\n    // console.log(url);\r\n    console.log(message);\r\n\r\n    props.TAPI.sendMessage(user, message);\r\n    // axios.post(url, { message: msg }).then((res) => console.log(res.data));\r\n    // let arr = messagesArr.find((i) => i.title == props.type).arr;\r\n    // console.log(props.message);\r\n  };\r\n\r\n  return (\r\n    <div className=\"sup_message\">\r\n      {/* {props.users.map((u) => ( */}\r\n      {props.users.map((u) => (\r\n        <button onClick={(e) => handleClick(e, u)}>{u.split(\":\")[0]}</button>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SingleMessage;\r\n","// const DefaultRandomMessages = () => {\r\nconst cry = `\r\nBibleThump \r\nBibleThump \r\nBibleThump \r\nBibleThump \r\nBibleThump \r\nBibleThump \r\nBibleThump BibleThump \r\nBibleThump BibleThump BibleThump \r\nBibleThump BibleThump BibleThump BibleThump \r\nBibleThump BibleThump \r\nBibleThump BibleThump BibleThump \r\nBibleThump BibleThump \r\nBibleThump \r\nFeelsWeakMan \r\nFeelsWeakMan FeelsWeakMan \r\nBibleThump BibleThump \r\nBibleThump \r\nBibleThump BibleThump BibleThump BibleThump \r\nBibleThump \r\n`;\r\n\r\nconst f = `\r\nF\r\nf\r\nf\r\nф\r\nф\r\nф\r\nф\r\nф\r\nф\r\nФ\r\nф\r\nФ\r\nф\r\nФ\r\nф\r\nФ\r\nФ\r\nФ\r\nФ\r\nФ\r\nPressF  \r\nPressF \r\nPressF \r\nPressF  \r\nPressF  \r\nPressF  PressF  \r\nPressF  PressF  \r\nPressF  PressF  PressF  \r\n`;\r\n\r\nconst danceJ = `\r\nMusic\r\nMusic Music\r\nMusic Music Music Music\r\npeepoDJ \r\npeepoDJ peepoDJ \r\ncatJAM \r\ncatJAM catJAM \r\ncatJAM catJAM catJAM \r\ncatJAMJAM \r\ncatJAMJAM catJAMJAM catJAMJAM \r\n`;\r\n\r\nconst danceK = `\r\nzxcDance \r\nzxcDance \r\nzxcDance \r\nzxcDance zxcDance \r\nzxcDance zxcDance zxcDance \r\ncatJAM \r\ncatJAM \r\ncatJAM \r\ncatJAM catJAM \r\ncatJAM catJAM catJAM\r\nzxcDance \r\nzxcDance \r\nzxcDance \r\nzxcDance zxcDance \r\nzxcDance zxcDance zxcDance \r\ncatJAM \r\ncatJAM \r\ncatJAM \r\ncatJAM catJAM \r\ncatJAM catJAM catJAM\r\nzxcDance \r\nzxcDance \r\nzxcDance \r\nzxcDance zxcDance \r\nzxcDance zxcDance zxcDance \r\ncatJAM \r\ncatJAM \r\ncatJAM \r\ncatJAM catJAM \r\ncatJAM catJAM catJAM\r\nmcaT \r\ndogJAM\r\ndogJAM dogJAM\r\ndogJAM dogJAM dogJAM\r\nratJAM\r\nratJAM ratJAM \r\nratJAM ratJAM ratJAM \r\nratJAM \r\nratJAM ratJAM \r\nratJAM ratJAM ratJAM \r\n`;\r\n\r\nconst danet = `\r\nДа\r\nДа\r\nДа\r\nДа\r\nДа\r\nДа\r\nДа\r\nДа\r\nда\r\nДА\r\nдааддаа\r\nда\r\nне\r\nDa\r\n--\r\n-\r\nНет\r\nНет\r\nне\r\nне\r\nне\r\nНет\r\nНет\r\nНет\r\nнет\r\nнет\r\nнет\r\nнет\r\nнет\r\nнет\r\nнет\r\nнет\r\nнет\r\nнет\r\nda\r\n+\r\n+\r\nНеееееееет\r\nнетъ\r\nНет\r\nнетт\r\nNe\r\nНЕТ\r\n`;\r\n\r\nconst lol = `\r\nАХАХАХА\r\nахахахахахахаха\r\nахахаа\r\nПЗХАХПАХП\r\nахаххахахахавхах\r\nпххапхха\r\nаххаахах\r\nахаха\r\nххпхпхххахахахах\r\nххаахахахаа\r\nаххааааахааа\r\nпхпхпха\r\nХхахаха\r\nАхаваххххахвххпа\r\nХАХАХА\r\nпхахвххвахпвх\r\nзаахапзпзпапхпап\r\nхпххаахпххпхзахзпц\r\nуххаахазззпхпха\r\nхвхвхХАХААХХА\r\nхвхвх\r\nхахахахах\r\nХХАХХПХПХАВХХЫЫХФХ\r\nАХХХАХАХА\r\nхххахаха\r\nхпха\r\nахахааххахахахах\r\nВХАХХВХАХВХАВ\r\nАХАХААХАХАХ\r\nхахахахахахА\r\nХАХАХАХАХАХ\r\nахахахах\r\nАХАХХАХАХХАХА\r\nахахахха\r\nахахахаххааха\r\nХХАХАХАХА\r\nахаххахахахаха\r\nХХАХАХАХАХАХАХ\r\nхахахахах\r\nахааахаахахха\r\nАХХАХААХААХ\r\nАХАХАХХААХАХХА\r\nахаха\r\nхах\r\nхахах\r\nхаха\r\nаххахахаха\r\nахахахахахаахах\r\nxaxaxaxaxaxa\r\nхаахаха\r\nаахахахахаа\r\nахахахахахах\r\nАхаххахаххахах\r\nАХАХАХАХАХАХА\r\nахахахахах\r\nаххаахахаха\r\nХАХАХАХХАХАА\r\nхааххахаахха\r\nхахааххахахап\r\nxaxaxaxaxaaxax\r\nахаххахах\r\nахахахаха\r\nАПХЗП\r\nавыхахвыахв\r\nаххаахах\r\nхаххахаахха0а\r\nхахахха\r\nХАХАХАХАХ\r\nахахаххааха\r\nахххахахах\r\nпхахахаахахахахаа\r\nХАХАХАХААХАХАА\r\nахАХахАХХА\r\nАХХААХАХ\r\nаххахавххах\r\nАХАХАХАХА\r\nХАХАХАХАХАХХАА\r\nАХАХВХХАХАВХХ\r\nхахахахахаах\r\nХАХАХХАХААХАХ\r\nХАХАХААХА\r\nХВАХВАХ\r\nхахахаах\r\nАхахахахха\r\nпхаххахаххаахаха\r\nаххааххаха\r\nахвхвххвхвххвха\r\nахахаааха\r\nахпапхахпап\r\nаххааххахаа\r\nАхахахахха\r\nАХАХАХАХ\r\nхахахахаха\r\nахахаххпхпхп\r\nахахахахахахахахах\r\nахахах\r\nахпхпхахахах\r\nахахахахааахаха\r\nахаххахахаахаа\r\nахаахахв\r\nахаахаххахахахв\r\nахахахпххахахахв\r\nхпхахаххаа\r\nхпхпххахаха\r\nАХАХАХ\r\nLUL\r\nLUL\r\nLUL\r\nLUL\r\nLUL\r\nLUL\r\nLUL LUL \r\nLUL LUL \r\nLUL LUL \r\nLUL LUL LUL\r\nLUL LUL LUL\r\nLUL LUL LUL\r\nахахаххахаа\r\nАзааазавххаха\r\nKEKW \r\nKEKW \r\nKEKW \r\nKEKW \r\nKEKW \r\nKEKW \r\nKEKW \r\nKEKW \r\nKEKW KEKW \r\nKEKW KEKW KEKW \r\nKEKW \r\nOMEGALUL \r\nOMEGALUL OMEGALUL \r\nахахаххахаа\r\nАзааазавххаха\r\nKEKW \r\nKEKW \r\nKEKW \r\nKEKW \r\nKEKW \r\nKEKW \r\nKEKW \r\nKEKW \r\nKEKW KEKW \r\nKEKW KEKW KEKW \r\nKEKW \r\nOMEGALUL \r\nOMEGALUL \r\nOMEGALUL \r\nOMEGALUL \r\nOMEGALUL \r\nOMEGALUL \r\nOMEGALUL \r\nOMEGALUL \r\nOMEGALUL \r\nOMEGALUL OMEGALUL\r\n`;\r\n\r\nconst qq = `\r\nку ку\r\nздарова\r\nпривет KonCha\r\nKonCha KonCha\r\nдаров\r\nКу\r\nНу здарова\r\nq\r\nсалам брат\r\nздаров\r\nку\r\nКу\r\nПривет\r\nкукукуку\r\nДоброе утро\r\nЗдарова\r\nЗдарова\r\nку\r\nку\r\nку\r\nку\r\nku\r\nприветттт\r\nдоровп\r\nдороу\r\nкук\r\nздорова заебал\r\nку\r\nку\r\nку\r\nку\r\nку\r\nку\r\nку\r\nку\r\nку ку ку ку ку ку\r\nкукукуку\r\nкуку ку ку ку ку\r\nкуку ку\r\nку ку ку ку ку ку ку \r\nкуку\r\nKonCha привет\r\n`;\r\n\r\nconst bb = `\r\nбб\r\nбб\r\nбб\r\nбб\r\nбб\r\nбб\r\nбб\r\nбб\r\nбб\r\nбб\r\nбб\r\nБб\r\nБб\r\nБб\r\nББ\r\nББ`;\r\n\r\nlet getArr = (str) =>\r\n  str.slice(1, str.length - 1).split(`\r\n`);\r\n\r\nclass Message {\r\n  constructor(id, arr, title, img) {\r\n    (this.id = id),\r\n      (this.arr = arr),\r\n      (this.title = title),\r\n      (this.img = img || \"\");\r\n  }\r\n}\r\n\r\n// let messages = [\r\nlet DefaultRandomMessages = [\r\n  new Message(0, getArr(lol), \"lol\", \"https://bit.ly/3CB8qVG\"),\r\n  new Message(1, getArr(f), \"f\", \"https://bit.ly/3bslrow\"),\r\n  new Message(2, getArr(cry), \"cry\", \"https://bit.ly/3Bwq4Za\"),\r\n  new Message(3, getArr(danet), \"danet\", \"\"),\r\n  new Message(4, getArr(danceJ), \"dance\", \"https://bit.ly/3pWtPFg\"),\r\n  new Message(5, getArr(qq), \"qq\", \"\"),\r\n  new Message(6, getArr(bb), \"bb\", \"\")\r\n];\r\n\r\nconsole.log(\"d\", DefaultRandomMessages);\r\nexport default DefaultRandomMessages;\r\n\r\n// export default DefaultRandomMessages;\r\n","import { makeAutoObservable } from \"mobx\";\r\nimport DefaultRandomMessages from \"../DefaultRandomMessages\";\r\n\r\nclass Messages {\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  state = [];\r\n\r\n  init() {\r\n    let localM = JSON.parse(localStorage.getItem(\"randomMessages\"));\r\n    localM = localM ? localM : DefaultRandomMessages;\r\n    console.log(\"l\", localM);\r\n    this.state = localM;\r\n  }\r\n\r\n  reset() {\r\n    localStorage.setItem(\r\n      \"randomMessages\",\r\n      JSON.stringify(DefaultRandomMessages)\r\n    );\r\n    this.state = DefaultRandomMessages;\r\n  }\r\n\r\n  updateMessage(message) {\r\n    let newState = this.state.map((i) => (i.id === message.id ? message : i));\r\n    this.state = newState;\r\n    localStorage.setItem(\"randomMessages\", JSON.stringify(newState));\r\n    console.log(newState);\r\n  }\r\n\r\n  addMessage = () => {\r\n    const clearMessage = { id: Date.now(), title: \"\", img: \"\", arr: [\"\"] };\r\n    const newState = JSON.parse(JSON.stringify(this.state)); //copy\r\n    newState.push(clearMessage);\r\n    localStorage.setItem(\"randomMessages\", JSON.stringify(newState));\r\n    console.log(newState);\r\n    this.state = newState;\r\n  };\r\n\r\n  removeMessage = (id) => {\r\n    console.log(id);\r\n    let newState = this.state.filter((i) => i.id !== id);\r\n    localStorage.setItem(\"randomMessages\", JSON.stringify(newState));\r\n    this.state = newState;\r\n    console.log(newState);\r\n  };\r\n}\r\n\r\nexport default new Messages();\r\n","import randomInteger from \"./randomInteger\";\r\nimport useApi from \"./useApi\";\r\nimport SingleMessage from \"./SingleMessage\";\r\nimport { useState } from \"react\";\r\nimport Messages from \"./store/Messages\";\r\nconst MessageByTitle = (str) => messages.find((el) => el.title == str);\r\n\r\nconst RandomMessages = (props) => {\r\n  const TAPI = useApi(props.authUsers, props.setAuthUsers, props.channel);\r\n  // const TAPI = useApi();\r\n\r\n  const [isHelloShow, toggleHelloShow] = useState(false);\r\n  const [isBBShow, toggleBBShow] = useState(false);\r\n\r\n  const handleClick = (item) => {\r\n    let user = props.users[randomInteger(0, props.users.length - 1)];\r\n    let messagesArr = item.arr;\r\n    let message = messagesArr[randomInteger(0, messagesArr.length - 1)];\r\n    // TAPI.sendMessage(user, message);\r\n    TAPI.sendMessage(user, message);\r\n  };\r\n\r\n  const Style = (value) =>\r\n    value\r\n      ? {\r\n          backgroundImage: `url('${value}')`\r\n        }\r\n      : {};\r\n\r\n  return (\r\n    <div className=\"random_messages\">\r\n      {/* <h3>Random</h3> */}\r\n      <div className=\"row\">\r\n        <button onClick={() => props.toggleIsEdit(!props.isEdit)}>\r\n          <p>Edit</p>\r\n        </button>\r\n        {Messages.state.map((i, index) => (\r\n          <button\r\n            key={index}\r\n            onClick={() => handleClick(i)}\r\n            style={Style(i.img)}\r\n          >\r\n            {i.img != \"\" ? \"\" : <p>{i.title}</p>}\r\n          </button>\r\n        ))}\r\n      </div>\r\n\r\n      {/* <button onClick={() => toggleHelloShow(!isHelloShow)}>hi</button> */}\r\n      {/* <button onClick={() => toggleBBShow(!isBBShow)}>hi</button> */}\r\n\r\n      {isHelloShow ? (\r\n        <SingleMessage\r\n          users={props.users}\r\n          message={MessageByTitle(\"qq\")}\r\n          type=\"qq\"\r\n          TAPI={TAPI}\r\n        />\r\n      ) : null}\r\n      {isBBShow ? (\r\n        <SingleMessage\r\n          users={props.users}\r\n          message={MessageByTitle(\"qq\")}\r\n          type=\"bb\"\r\n          TAPI={TAPI}\r\n        />\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RandomMessages;\r\n","import { useState, useCallback, useEffect } from \"react\";\r\n\r\nimport randomInteger from \"./randomInteger\";\r\nimport useApi from \"./useApi\";\r\n\r\nconst shuffledArray = (arr) => arr.sort((a, b) => 0.5 - Math.random());\r\n\r\nconst useToggle = (messages, chatUsers, authUsers, setAuthUsers) => {\r\n  const [state, setState] = useState(0);\r\n  const toggle = useCallback(() => setState((state) => !state), []);\r\n  const [currentUsers, setCurrentUsers] = useState([]);\r\n  const TAPI = useApi(authUsers, setAuthUsers);\r\n\r\n  let message = () => messages.arr[randomInteger(0, messages.arr.length - 1)];\r\n  let randomUsers = () => shuffledArray(chatUsers);\r\n\r\n  useEffect(() => {\r\n    // console.log(randomUsers());\r\n    if (state) {\r\n      if (state === true) {\r\n        setCurrentUsers(randomUsers());\r\n        setState(1);\r\n      }\r\n\r\n      const id = setInterval(() => {\r\n        let u = currentUsers[state - 1];\r\n        let m = message();\r\n        TAPI.turboSendMessage(u, m);\r\n        // TAPI.sendMessage(u, m);\r\n        setState(state + 1);\r\n        console.log(\"r\");\r\n      }, randomInteger(0, 500));\r\n\r\n      if (state > chatUsers.length) setState(false);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [state]);\r\n\r\n  return [state, toggle];\r\n};\r\n\r\nexport default useToggle;\r\n","import randomInteger from \"./randomInteger\";\r\nimport { useRef, useState } from \"react\";\r\nimport useApi from \"./useApi\";\r\nimport useToggle from \"./useToggle\";\r\n\r\nconst CustomMessage = (props) => {\r\n  const TextAreaRef = useRef(\"\");\r\n  const InputRef = useRef(\"\");\r\n\r\n  const TAPI = useApi(props.channel);\r\n\r\n  const [isSpam, toggleIsSpam] = useToggle(\r\n    { arr: [TextAreaRef.current.value] },\r\n    props.users,\r\n    props.authUsers,\r\n    props.setAuthUsers\r\n  );\r\n\r\n  const [stateUser, setStateUser] = useState(false);\r\n  const [filtredUsers, setFiltedusers] = useState(props.users);\r\n  const [counter, setCounter] = useState(0);\r\n\r\n  const handleSendEnter = (item) => {\r\n    let user = stateUser\r\n      ? stateUser\r\n      : props.users[randomInteger(0, props.users.length - 1)];\r\n    TAPI.sendMessage(user, TextAreaRef.current.value);\r\n    // TAPI.turboSendMessage(user, TextAreaRef.current.value);\r\n    TextAreaRef.current.value = \"\";\r\n  };\r\n\r\n  const handleTurboSend = () => {\r\n    let user = stateUser\r\n      ? stateUser\r\n      : props.users[randomInteger(0, props.users.length - 1)];\r\n    TAPI.turboSendMessage(user, TextAreaRef.current.value);\r\n    TextAreaRef.current.value = \"\";\r\n  };\r\n\r\n  const toggleChant = (e) => {\r\n    if (e.target.style.border == \"2px solid red\") {\r\n      e.target.style.border = \"\";\r\n      toggleIsSpam();\r\n    } else {\r\n      e.target.style.border = \"2px red solid\";\r\n      toggleIsSpam();\r\n    }\r\n  };\r\n\r\n  const Style = (value) =>\r\n    stateUser === value ? { border: \"1px red solid\" } : { border: \"none\" };\r\n\r\n  const handleKeyUp = (e) => (e.key === \"Enter\" ? handleSendEnter() : null);\r\n\r\n  const handleTurboAuth = (e) => {\r\n    TAPI.turboAuth();\r\n    e.target.style.display = \"none\";\r\n  };\r\n\r\n  return (\r\n    <div className=\"custom_message\">\r\n      <div className=\"left\">\r\n        {/* <h3>Custom</h3> */}\r\n\r\n        {/* <div className=\"list\"> */}\r\n        {/* <button onClick={tryAuth}>{counter}</button> */}\r\n        {/* </div> */}\r\n        {/* <button onClick={()=> props.selectChannel('')}>\r\n          settings\r\n        </button> */}\r\n        <button onClick={handleTurboAuth} className=\"connect_users\">\r\n          Connect users\r\n        </button>\r\n\r\n        {/* <button onClick={handleTurboSend}>turbo send</button> */}\r\n\r\n        <textarea\r\n          ref={TextAreaRef}\r\n          onChange={(e) => {\r\n            TextAreaRef.current.value = e.target.value;\r\n            console.log(TextAreaRef.current.value);\r\n          }}\r\n          onKeyUp={handleKeyUp}\r\n        />\r\n        <div className=\"df\">\r\n          <button\r\n            className=\"custom_message_chant\"\r\n            onClick={toggleChant}\r\n            style={{ backgroundImage: `url('/chant.png')` }}\r\n          >\r\n            {isSpam ? \"TURN OFF\" : \"TURN ON\"}\r\n          </button>\r\n          <button onClick={() => handleSendEnter()}>Send</button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"users\">\r\n        <input\r\n          ref={InputRef}\r\n          onChange={(e) => {\r\n            InputRef.current.value = e.target.value;\r\n            console.log(InputRef.current.value);\r\n\r\n            let newUsers = InputRef.current.value\r\n              ? filtredUsers.filter((u) =>\r\n                  u.split(\":\")[0].match(InputRef.current.value)\r\n                )\r\n              : props.users;\r\n\r\n            setFiltedusers(newUsers);\r\n          }}\r\n        />\r\n\r\n        <button onClick={() => setStateUser(false)} style={Style(false)}>\r\n          random\r\n        </button>\r\n\r\n        {filtredUsers.map((i, index) => (\r\n          <button\r\n            key={index}\r\n            onClick={() => setStateUser(i.split(\":\")[0])}\r\n            style={Style(i.split(\":\")[0])}\r\n          >\r\n            {i.split(\":\")[0]}\r\n          </button>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CustomMessage;\r\n","import { useRef, useEffect } from \"react\";\r\n\r\nconst UserInput = (props) => {\r\n  const TextareaRef = useRef(\"\");\r\n\r\n  const saveUsers = () => {\r\n    let arr = TextareaRef.current.value.split(\"\\n\");\r\n    let str = JSON.stringify(arr);\r\n    localStorage.setItem(\"users\", str);\r\n    props.setUsers(arr);\r\n    console.log(JSON.stringify(arr));\r\n  };\r\n\r\n  const checkUsers = () => {\r\n    let i = localStorage.getItem(\"users\");\r\n    i = JSON.parse(i);\r\n    // console.log(i);\r\n    // props.setUsers(i);\r\n    let uNames = i.map(\r\n      (u) =>\r\n        `\r\n      ` + u.split(\":\")[0]\r\n    );\r\n    alert(uNames);\r\n  };\r\n\r\n  const handeType = (e) => {\r\n    TextareaRef.current.value = e.target.value;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <textarea id=\"TextareaUsers\" ref={TextareaRef} onChange={handeType} />\r\n      <button onClick={saveUsers}>save users</button>\r\n      <button onClick={() => checkUsers()}>check Users</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserInput;\r\n","import { observer } from \"mobx-react-lite\";\r\nimport { useState, useRef } from \"react\";\r\nimport Messages from \"./store/Messages\";\r\n\r\nconst useTextarea = (messageObject) => {\r\n  const [state, setState] = useState(\"\");\r\n\r\n  return [state, setState];\r\n};\r\n\r\nconst TextArea = (props) => {\r\n  const textAreaRef = useRef(props.str);\r\n\r\n  return (\r\n    <div>\r\n      <textarea\r\n        placeholder={props.str}\r\n        ref={textAreaRef}\r\n        onChange={(e) => {\r\n          textAreaRef.current.value = e.target.value;\r\n          console.log(textAreaRef.current.value);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst EditElement = (props) => {\r\n  const [current, setCurrentMessage] = useState(props.message);\r\n  const mTitleRef = useRef(props.message.title);\r\n  const mImgRef = useRef(props.message.img);\r\n  const [mArr, setMArr] = useState(props.message.arr);\r\n\r\n  const newMessage = () => {\r\n    let bar = {\r\n      id: props.message.id,\r\n      title: mTitleRef.current.value,\r\n      img: mImgRef.current.value,\r\n      arr: mArr\r\n    };\r\n    return bar;\r\n  };\r\n\r\n  const arrToString = (arr) => {\r\n    arr = arr\r\n      .map((i) => i + \"\\n\")\r\n      .toString()\r\n      .replaceAll(\",\", \"\");\r\n    console.log(arr);\r\n    // arr = arr.shift()\r\n    return arr;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <hr />\r\n\r\n      <button onClick={() => props.handleTogglePlayer()}>\r\n        {props.isPlayerShow ? \"close player\" : \"open player\"}\r\n      </button>\r\n\r\n      <div className=\"text-areas\">\r\n        <textarea\r\n          defaultValue={props.message.title}\r\n          placeholder={props.message.title}\r\n          ref={mTitleRef}\r\n          onChange={(e) => {\r\n            mTitleRef.current.value = e.target.value;\r\n            console.log(mTitleRef.current.value);\r\n          }}\r\n        />\r\n\r\n        <textarea\r\n          placeholder={props.message.img}\r\n          ref={mImgRef}\r\n          defaultValue={props.message.img}\r\n          onChange={(e) => {\r\n            mImgRef.current.value = e.target.value;\r\n            console.log(mImgRef.current.value);\r\n          }}\r\n        />\r\n\r\n        <textarea\r\n          placeholder={mArr}\r\n          defaultValue={arrToString(mArr)}\r\n          onChange={(e) => {\r\n            let val = e.target.value.split(\"\\n\");\r\n            setMArr(val);\r\n          }}\r\n        />\r\n      </div>\r\n\r\n      <button onClick={() => Messages.updateMessage(newMessage())}>save</button>\r\n\r\n      <button onClick={() => Messages.removeMessage(props.message.id)}>\r\n        remove\r\n      </button>\r\n\r\n      <hr />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst EditComponent = (props) => {\r\n  let m = Messages.state;\r\n\r\n  const handleTogglePlayer = () => {\r\n    // console.log(props);\r\n    props.toggleIsPlayerShow(!props.isPlayerShow);\r\n  };\r\n\r\n  return (\r\n    <div className=\"edit_component\">\r\n      <h1>edit</h1>\r\n\r\n      <button onClick={() => Messages.addMessage()}>Add</button>\r\n      <button onClick={() => props.toggleIsEdit(props.false)}>Cancel</button>\r\n      <button onClick={() => Messages.reset()}>Reset</button>\r\n      <button onClick={() => console.log(Messages.state[0])}>state</button>\r\n\r\n      {/* {messages.map((i) => { */}\r\n      {m.map((i) => {\r\n        // {props.randomMessages.map((i) => {\r\n        return (\r\n          <EditElement\r\n            message={i}\r\n            handleTogglePlayer={handleTogglePlayer}\r\n            isPlayerShow={props.isPlayerShow}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(EditComponent);\r\n","import { useEffect, useState } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport \"./styles.css\";\nimport ReactDOM from \"react-dom\";\nimport ConnectInput from \"./ConnectInput\";\nimport EmbedChat from \"./EmbedChat\";\nimport EmbedPlayer from \"./EmbedPlayer\";\nimport RandomMessages from \"./RandomMessages\";\nimport CustomMessage from \"./CustomMessage\";\nimport UsersInput from \"./UsersInput\";\nimport EditComponent from \"./EditComponent\";\nimport Messages from \"./store/Messages\";\n\nimport DefaultRandomMessages from \"./DefaultRandomMessages\";\nimport axios from \"axios\";\n\nconst App = () => {\n  // state\n  const [isEdit, toggleIsEdit] = useState(false);\n  const [isPlayerShow, toggleIsPlayerShow] = useState(true);\n  const [channel, selectChannel] = useState(\"\");\n  const [authUsers, setAuthUsers] = useState([]);\n\n  let localCode = localStorage.getItem(\"scode\");\n  const [sCode, setSCode] = useState(localCode);\n\n  let dUsers = localStorage.getItem(\"users\");\n  dUsers = dUsers ? JSON.parse(dUsers) : [];\n  const [users, setUsers] = useState(dUsers);\n\n  let dPath = localStorage.getItem(\"path\");\n  dPath = dPath ? JSON.parse(dPath) : \"\";\n  const [path, setLink] = useState(dPath);\n\n  useEffect(() => {\n    Messages.init();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <button onClick={() => console.log(users)}>test</button>\n\n      {isEdit ? (\n        <EditComponent\n          DefaultRandomMessages={DefaultRandomMessages}\n          toggleIsEdit={toggleIsEdit}\n          isPlayerShow={isPlayerShow}\n          toggleIsPlayerShow={toggleIsPlayerShow}\n        />\n      ) : (\n        \"\"\n      )}\n      {channel ? (\n        // y\n        <div className=\"wrapper\">\n          {isPlayerShow ? <EmbedPlayer channel={channel} /> : \"\"}\n          <div className=\"right\">\n            <div className=\"dirty\">\n              <RandomMessages\n                users={users}\n                authUsers={authUsers}\n                setAuthUsers={setAuthUsers}\n                channel={channel}\n                toggleIsEdit={toggleIsEdit}\n                isEdit={isEdit}\n              />\n              <CustomMessage\n                sCode={sCode}\n                users={users}\n                authUsers={authUsers}\n                setAuthUsers={setAuthUsers}\n                channel={channel}\n                selectChannel={selectChannel}\n              />\n            </div>\n            <EmbedChat channel={channel} />\n          </div>\n        </div>\n      ) : (\n        // n\n\n        <div className=\"wrapper_login\">\n          <div className=\"login\">\n            <ConnectInput\n              selectChannel={selectChannel}\n              setSCode={setSCode}\n              users={users}\n              authUsers={authUsers}\n              setAuthUsers={setAuthUsers}\n              channel={channel}\n              path={path}\n              setLink={setLink}\n            />\n            <UsersInput setUsers={setUsers} />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default observer(App);\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}